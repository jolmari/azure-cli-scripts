---
apiVersion: v1
kind: Namespace
metadata:
  name: secret-sync

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: default
  namespace: secret-sync

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: sync-secret-config
  namespace: secret-sync
data:
  # Patch this ConfigMap with additional values needed for your cloud
  KUBE_SECRET: my-secret # does not yet exist -- will be created in the same Namespace
  SYNC_PERIOD: "3600" # tokens expire; refresh faster than that

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: sync-secret
  name: sync-secret
  namespace: secret-sync
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sync-secret
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: sync-secret
    spec:
      serviceAccount: default
      serviceAccountName: default
      containers:
        - image: alpine/k8s:1.30.0
          name: sync-secret
          envFrom:
            - configMapRef:
                name: sync-secret-config
          command: ["/bin/sh"]
          args:
            - "-ceu" # -c: exit on error; -e: exit on unset var; -u: exit on unset var in subshell
            - |-
              reconcile() {
                echo "Updating secret: $KUBE_SECRET -- $(date)"
                

                applySecret "$KUBE_SECRET" "git" "$(date +%s)"

                echo "Finished! -- $(date)"
                echo
              }

              applySecret() {
                kubectl create secret generic my-secret \
                  --from-literal=username=foo \
                  --from-literal=password= \
                  --dry-run=client \
                  --output yaml \
                  | grep -v "creationTimestamp:" \
                  | kubectl apply -f -
              }

              pause_loop() {
                sleep "$SYNC_PERIOD" || true
              }

              graceful_exit() {
                echo "Trapped signal -- $(date)"
                job_ids="$(
                  jobs \
                    | grep "pause_loop" \
                    | cut -d] -f1 \
                    | tr [ %
                  )"
                # shellcheck disable=SC2086
                if [ "$job_ids" ]; then
                  kill $job_ids
                fi
                wait
                echo "Graceful exit -- $(date)"
              }

              trap graceful_exit INT TERM

              echo "Loop started (period: $SYNC_PERIOD s) -- $(date)"
              while true; do
                reconcile & wait $!
                pause_loop & wait $!
              done
          resources:
            limits:
              memory: "64Mi"
              cpu: "100m"
            requests:
              memory: "32Mi"
              cpu: "50m"
